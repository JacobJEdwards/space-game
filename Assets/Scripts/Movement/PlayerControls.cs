//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.12.0
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Movement
{
    /// <summary>
    /// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/PlayerControls.inputactions".
    /// </summary>
    /// <remarks>
    /// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
    /// </remarks>
    /// <example>
    /// <code>
    /// using namespace UnityEngine;
    /// using UnityEngine.InputSystem;
    ///
    /// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
    /// public class Example : MonoBehaviour, MyActions.IPlayerActions
    /// {
    ///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
    ///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
    ///
    ///     void Awake()
    ///     {
    ///         m_Actions = new MyActions_Actions();              // Create asset object.
    ///         m_Player = m_Actions.Player;                      // Extract action map object.
    ///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
    ///     }
    ///
    ///     void OnDestroy()
    ///     {
    ///         m_Actions.Dispose();                              // Destroy asset object.
    ///     }
    ///
    ///     void OnEnable()
    ///     {
    ///         m_Player.Enable();                                // Enable all actions within map.
    ///     }
    ///
    ///     void OnDisable()
    ///     {
    ///         m_Player.Disable();                               // Disable all actions within map.
    ///     }
    ///
    ///     #region Interface implementation of MyActions.IPlayerActions
    ///
    ///     // Invoked when "Move" action is either started, performed or canceled.
    ///     public void OnMove(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
    ///     }
    ///
    ///     // Invoked when "Attack" action is either started, performed or canceled.
    ///     public void OnAttack(InputAction.CallbackContext context)
    ///     {
    ///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
    ///     }
    ///
    ///     #endregion
    /// }
    /// </code>
    /// </example>
    public partial class @PlayerControls: IInputActionCollection2, IDisposable
    {
        /// <summary>
        /// Provides access to the underlying asset instance.
        /// </summary>
        public InputActionAsset asset { get; }

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""SpaceControls"",
            ""id"": ""bdde4bff-e004-458f-9e68-36335544bb98"",
            ""actions"": [
                {
                    ""name"": ""Thrust"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8bdfccea-ab81-4a8d-9a64-062aee223f4e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""PassThrough"",
                    ""id"": ""af5c82e7-9c81-4268-af2c-81dd302d3cba"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Strafe"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b13b04b6-56bf-48b3-a675-5320a676ce59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UpDown"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a5559054-4590-401a-b863-3156716d3c05"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a02379fd-d68f-4041-b55f-24bf561d33f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PitchYaw"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8f27e02d-8d5f-4b7f-a5dc-811ba8d481e6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e4e41dc5-5775-4ee9-ba7f-80d7a21d0fef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwapCamera"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4c6febcb-d646-491b-8790-ff9c29dd5317"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""WeaponFire"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4b82a80b-20c2-43f2-9823-a5474dcaef4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Land"",
                    ""type"": ""PassThrough"",
                    ""id"": ""3f930e7f-566f-40f5-8494-ed824e41bc7a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7a4bace9-f19f-4aa7-9c84-cb9a8ebe6b06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jetpack"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8eb028ce-e1b1-43fa-a548-24c1da5775a0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=0.2)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6dae158c-2baf-406d-bb20-2e1b5ad9e231"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleInventory"",
                    ""type"": ""PassThrough"",
                    ""id"": ""64c02273-353c-4b7d-9b26-bb760acb1ca5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""ThrustKB"",
                    ""id"": ""4455db07-704c-4e44-a932-9bc384f0832e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""d0004bc0-3eff-41a7-a987-576b6dc2eaa6"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0bec98fa-f306-418f-bd19-2e223226696d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thrust"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1c8ec7a8-b830-49bf-a8c3-a1bbf3610cd2"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""StrafeKB"",
                    ""id"": ""5895e97f-ab3c-4d9b-bd23-032b90e147a3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafe"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bae1f004-dd90-4c9f-a244-41ca75b4a239"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d892130e-0d98-4ced-bc0d-4cdfe6f9185d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Strafe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c930f73e-508d-4f8d-a0ac-5402f8b857ac"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""UpDownKB"",
                    ""id"": ""2056655b-c64a-4fb4-9b59-cf019ce339f2"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""259afa92-aa1f-4147-9faa-12f3b1922812"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3e53cf78-f0ea-4030-a2a2-c5b7d0bae04c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UpDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""RollKB"",
                    ""id"": ""971d9f0b-6223-46da-8115-93d066bdfe4a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2b039cab-0de1-4441-a5f8-e199617a41b4"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6859a84d-4acb-4e7c-968d-08f82a2eeba2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""232e407d-1861-4d4f-b680-aa48e8ba38f8"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PitchYaw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c90ccfb3-d94d-4ba1-8f5a-e5308879d134"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dbda1e22-329c-45ad-9b54-9daa0bcf867f"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwapCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fef99a42-b4e8-4c44-9551-55732befa05b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""WeaponFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65296f29-36c3-4e1a-85ea-aa61271e1f56"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Land"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69c429be-2611-403e-b3d6-669b76c840d6"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""685cb9fd-9fa5-4906-b5e9-89d0f3a541da"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jetpack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44a48470-80b6-4283-8333-602eaa1fdb5a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77637da7-ce45-4270-92c5-a9bd50b6b7e0"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // SpaceControls
            m_SpaceControls = asset.FindActionMap("SpaceControls", throwIfNotFound: true);
            m_SpaceControls_Thrust = m_SpaceControls.FindAction("Thrust", throwIfNotFound: true);
            m_SpaceControls_Interact = m_SpaceControls.FindAction("Interact", throwIfNotFound: true);
            m_SpaceControls_Strafe = m_SpaceControls.FindAction("Strafe", throwIfNotFound: true);
            m_SpaceControls_UpDown = m_SpaceControls.FindAction("UpDown", throwIfNotFound: true);
            m_SpaceControls_Roll = m_SpaceControls.FindAction("Roll", throwIfNotFound: true);
            m_SpaceControls_PitchYaw = m_SpaceControls.FindAction("PitchYaw", throwIfNotFound: true);
            m_SpaceControls_Boost = m_SpaceControls.FindAction("Boost", throwIfNotFound: true);
            m_SpaceControls_SwapCamera = m_SpaceControls.FindAction("SwapCamera", throwIfNotFound: true);
            m_SpaceControls_WeaponFire = m_SpaceControls.FindAction("WeaponFire", throwIfNotFound: true);
            m_SpaceControls_Land = m_SpaceControls.FindAction("Land", throwIfNotFound: true);
            m_SpaceControls_Sprint = m_SpaceControls.FindAction("Sprint", throwIfNotFound: true);
            m_SpaceControls_Jetpack = m_SpaceControls.FindAction("Jetpack", throwIfNotFound: true);
            m_SpaceControls_Jump = m_SpaceControls.FindAction("Jump", throwIfNotFound: true);
            m_SpaceControls_ToggleInventory = m_SpaceControls.FindAction("ToggleInventory", throwIfNotFound: true);
        }

        ~@PlayerControls()
        {
            UnityEngine.Debug.Assert(!m_SpaceControls.enabled, "This will cause a leak and performance issues, PlayerControls.SpaceControls.Disable() has not been called.");
        }

        /// <summary>
        /// Destroys this asset and all associated <see cref="InputAction"/> instances.
        /// </summary>
        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
        public void Enable()
        {
            asset.Enable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
        public void Disable()
        {
            asset.Disable();
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
        public IEnumerable<InputBinding> bindings => asset.bindings;

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // SpaceControls
        private readonly InputActionMap m_SpaceControls;
        private List<ISpaceControlsActions> m_SpaceControlsActionsCallbackInterfaces = new List<ISpaceControlsActions>();
        private readonly InputAction m_SpaceControls_Thrust;
        private readonly InputAction m_SpaceControls_Interact;
        private readonly InputAction m_SpaceControls_Strafe;
        private readonly InputAction m_SpaceControls_UpDown;
        private readonly InputAction m_SpaceControls_Roll;
        private readonly InputAction m_SpaceControls_PitchYaw;
        private readonly InputAction m_SpaceControls_Boost;
        private readonly InputAction m_SpaceControls_SwapCamera;
        private readonly InputAction m_SpaceControls_WeaponFire;
        private readonly InputAction m_SpaceControls_Land;
        private readonly InputAction m_SpaceControls_Sprint;
        private readonly InputAction m_SpaceControls_Jetpack;
        private readonly InputAction m_SpaceControls_Jump;
        private readonly InputAction m_SpaceControls_ToggleInventory;
        /// <summary>
        /// Provides access to input actions defined in input action map "SpaceControls".
        /// </summary>
        public struct SpaceControlsActions
        {
            private @PlayerControls m_Wrapper;

            /// <summary>
            /// Construct a new instance of the input action map wrapper class.
            /// </summary>
            public SpaceControlsActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            /// <summary>
            /// Provides access to the underlying input action "SpaceControls/Thrust".
            /// </summary>
            public InputAction @Thrust => m_Wrapper.m_SpaceControls_Thrust;
            /// <summary>
            /// Provides access to the underlying input action "SpaceControls/Interact".
            /// </summary>
            public InputAction @Interact => m_Wrapper.m_SpaceControls_Interact;
            /// <summary>
            /// Provides access to the underlying input action "SpaceControls/Strafe".
            /// </summary>
            public InputAction @Strafe => m_Wrapper.m_SpaceControls_Strafe;
            /// <summary>
            /// Provides access to the underlying input action "SpaceControls/UpDown".
            /// </summary>
            public InputAction @UpDown => m_Wrapper.m_SpaceControls_UpDown;
            /// <summary>
            /// Provides access to the underlying input action "SpaceControls/Roll".
            /// </summary>
            public InputAction @Roll => m_Wrapper.m_SpaceControls_Roll;
            /// <summary>
            /// Provides access to the underlying input action "SpaceControls/PitchYaw".
            /// </summary>
            public InputAction @PitchYaw => m_Wrapper.m_SpaceControls_PitchYaw;
            /// <summary>
            /// Provides access to the underlying input action "SpaceControls/Boost".
            /// </summary>
            public InputAction @Boost => m_Wrapper.m_SpaceControls_Boost;
            /// <summary>
            /// Provides access to the underlying input action "SpaceControls/SwapCamera".
            /// </summary>
            public InputAction @SwapCamera => m_Wrapper.m_SpaceControls_SwapCamera;
            /// <summary>
            /// Provides access to the underlying input action "SpaceControls/WeaponFire".
            /// </summary>
            public InputAction @WeaponFire => m_Wrapper.m_SpaceControls_WeaponFire;
            /// <summary>
            /// Provides access to the underlying input action "SpaceControls/Land".
            /// </summary>
            public InputAction @Land => m_Wrapper.m_SpaceControls_Land;
            /// <summary>
            /// Provides access to the underlying input action "SpaceControls/Sprint".
            /// </summary>
            public InputAction @Sprint => m_Wrapper.m_SpaceControls_Sprint;
            /// <summary>
            /// Provides access to the underlying input action "SpaceControls/Jetpack".
            /// </summary>
            public InputAction @Jetpack => m_Wrapper.m_SpaceControls_Jetpack;
            /// <summary>
            /// Provides access to the underlying input action "SpaceControls/Jump".
            /// </summary>
            public InputAction @Jump => m_Wrapper.m_SpaceControls_Jump;
            /// <summary>
            /// Provides access to the underlying input action "SpaceControls/ToggleInventory".
            /// </summary>
            public InputAction @ToggleInventory => m_Wrapper.m_SpaceControls_ToggleInventory;
            /// <summary>
            /// Provides access to the underlying input action map instance.
            /// </summary>
            public InputActionMap Get() { return m_Wrapper.m_SpaceControls; }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
            public void Enable() { Get().Enable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
            public void Disable() { Get().Disable(); }
            /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
            public bool enabled => Get().enabled;
            /// <summary>
            /// Implicitly converts an <see ref="SpaceControlsActions" /> to an <see ref="InputActionMap" /> instance.
            /// </summary>
            public static implicit operator InputActionMap(SpaceControlsActions set) { return set.Get(); }
            /// <summary>
            /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <param name="instance">Callback instance.</param>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
            /// </remarks>
            /// <seealso cref="SpaceControlsActions" />
            public void AddCallbacks(ISpaceControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_SpaceControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SpaceControlsActionsCallbackInterfaces.Add(instance);
                @Thrust.started += instance.OnThrust;
                @Thrust.performed += instance.OnThrust;
                @Thrust.canceled += instance.OnThrust;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Strafe.started += instance.OnStrafe;
                @Strafe.performed += instance.OnStrafe;
                @Strafe.canceled += instance.OnStrafe;
                @UpDown.started += instance.OnUpDown;
                @UpDown.performed += instance.OnUpDown;
                @UpDown.canceled += instance.OnUpDown;
                @Roll.started += instance.OnRoll;
                @Roll.performed += instance.OnRoll;
                @Roll.canceled += instance.OnRoll;
                @PitchYaw.started += instance.OnPitchYaw;
                @PitchYaw.performed += instance.OnPitchYaw;
                @PitchYaw.canceled += instance.OnPitchYaw;
                @Boost.started += instance.OnBoost;
                @Boost.performed += instance.OnBoost;
                @Boost.canceled += instance.OnBoost;
                @SwapCamera.started += instance.OnSwapCamera;
                @SwapCamera.performed += instance.OnSwapCamera;
                @SwapCamera.canceled += instance.OnSwapCamera;
                @WeaponFire.started += instance.OnWeaponFire;
                @WeaponFire.performed += instance.OnWeaponFire;
                @WeaponFire.canceled += instance.OnWeaponFire;
                @Land.started += instance.OnLand;
                @Land.performed += instance.OnLand;
                @Land.canceled += instance.OnLand;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Jetpack.started += instance.OnJetpack;
                @Jetpack.performed += instance.OnJetpack;
                @Jetpack.canceled += instance.OnJetpack;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @ToggleInventory.started += instance.OnToggleInventory;
                @ToggleInventory.performed += instance.OnToggleInventory;
                @ToggleInventory.canceled += instance.OnToggleInventory;
            }

            /// <summary>
            /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
            /// </summary>
            /// <remarks>
            /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
            /// </remarks>
            /// <seealso cref="SpaceControlsActions" />
            private void UnregisterCallbacks(ISpaceControlsActions instance)
            {
                @Thrust.started -= instance.OnThrust;
                @Thrust.performed -= instance.OnThrust;
                @Thrust.canceled -= instance.OnThrust;
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
                @Strafe.started -= instance.OnStrafe;
                @Strafe.performed -= instance.OnStrafe;
                @Strafe.canceled -= instance.OnStrafe;
                @UpDown.started -= instance.OnUpDown;
                @UpDown.performed -= instance.OnUpDown;
                @UpDown.canceled -= instance.OnUpDown;
                @Roll.started -= instance.OnRoll;
                @Roll.performed -= instance.OnRoll;
                @Roll.canceled -= instance.OnRoll;
                @PitchYaw.started -= instance.OnPitchYaw;
                @PitchYaw.performed -= instance.OnPitchYaw;
                @PitchYaw.canceled -= instance.OnPitchYaw;
                @Boost.started -= instance.OnBoost;
                @Boost.performed -= instance.OnBoost;
                @Boost.canceled -= instance.OnBoost;
                @SwapCamera.started -= instance.OnSwapCamera;
                @SwapCamera.performed -= instance.OnSwapCamera;
                @SwapCamera.canceled -= instance.OnSwapCamera;
                @WeaponFire.started -= instance.OnWeaponFire;
                @WeaponFire.performed -= instance.OnWeaponFire;
                @WeaponFire.canceled -= instance.OnWeaponFire;
                @Land.started -= instance.OnLand;
                @Land.performed -= instance.OnLand;
                @Land.canceled -= instance.OnLand;
                @Sprint.started -= instance.OnSprint;
                @Sprint.performed -= instance.OnSprint;
                @Sprint.canceled -= instance.OnSprint;
                @Jetpack.started -= instance.OnJetpack;
                @Jetpack.performed -= instance.OnJetpack;
                @Jetpack.canceled -= instance.OnJetpack;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @ToggleInventory.started -= instance.OnToggleInventory;
                @ToggleInventory.performed -= instance.OnToggleInventory;
                @ToggleInventory.canceled -= instance.OnToggleInventory;
            }

            /// <summary>
            /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="SpaceControlsActions.UnregisterCallbacks(ISpaceControlsActions)" />.
            /// </summary>
            /// <seealso cref="SpaceControlsActions.UnregisterCallbacks(ISpaceControlsActions)" />
            public void RemoveCallbacks(ISpaceControlsActions instance)
            {
                if (m_Wrapper.m_SpaceControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            /// <summary>
            /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
            /// </summary>
            /// <remarks>
            /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
            /// </remarks>
            /// <seealso cref="SpaceControlsActions.AddCallbacks(ISpaceControlsActions)" />
            /// <seealso cref="SpaceControlsActions.RemoveCallbacks(ISpaceControlsActions)" />
            /// <seealso cref="SpaceControlsActions.UnregisterCallbacks(ISpaceControlsActions)" />
            public void SetCallbacks(ISpaceControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_SpaceControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SpaceControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        /// <summary>
        /// Provides a new <see cref="SpaceControlsActions" /> instance referencing this action map.
        /// </summary>
        public SpaceControlsActions @SpaceControls => new SpaceControlsActions(this);
        /// <summary>
        /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "SpaceControls" which allows adding and removing callbacks.
        /// </summary>
        /// <seealso cref="SpaceControlsActions.AddCallbacks(ISpaceControlsActions)" />
        /// <seealso cref="SpaceControlsActions.RemoveCallbacks(ISpaceControlsActions)" />
        public interface ISpaceControlsActions
        {
            /// <summary>
            /// Method invoked when associated input action "Thrust" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnThrust(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Interact" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnInteract(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Strafe" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnStrafe(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "UpDown" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnUpDown(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Roll" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnRoll(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "PitchYaw" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnPitchYaw(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Boost" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnBoost(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "SwapCamera" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSwapCamera(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "WeaponFire" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnWeaponFire(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Land" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnLand(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Sprint" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnSprint(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Jetpack" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnJetpack(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "Jump" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnJump(InputAction.CallbackContext context);
            /// <summary>
            /// Method invoked when associated input action "ToggleInventory" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
            /// </summary>
            /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
            /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
            void OnToggleInventory(InputAction.CallbackContext context);
        }
    }
}
